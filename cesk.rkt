#lang racket
(provide (all-defined-out))

(require "general.rkt")
(require "ast.rkt")
(require "lattice.rkt")
(require "test.rkt")


(random-seed 111) ; deterministic random
(define CESK-TIMELIMIT (make-parameter 2)) ; timeout in minutes


(define (index v x)
  (let ((i (vector-member x v)))
    (if i
        i
        (let ((i (add1 (vector-ref v 0))))
          (vector-set! v 0 i)
          (vector-set! v i x)
          i))))
(define frameis (make-vector 1000))
(define (frame->framei frame) (index frameis frame))
(define ctxis (make-vector 1000))
(define (ctx->ctxi ctx) (index ctxis ctx))
(define stateis (make-vector 1000))
(define (state->statei q) (index stateis q))
;(define storeis (make-vector 1000))
;(define (store->storei σ) (index storeis σ))

;; domain helpers
(define (env-lookup ρ x)
  (hash-ref ρ x))
(define (env-addresses ρ)
  (list->set (hash-values ρ)))
(define (store-lookup σ a)
  (hash-ref σ a))
(define (store-⊒ σ1 σ2 ⊒)
  (if (eq? σ1 σ2)
      #t
      (if (< (hash-count σ1) (hash-count σ2))
          #f
          (for/and (((k v) σ1))
            (and (hash-has-key? σ2)
                 (⊒ v (hash-ref σ2 k)))))))
(define (stack-lookup Ξ τ)
  (hash-ref Ξ τ))
;;

;; machine
(struct ev (e ρ ι κ) #:transparent
  #:property prop:custom-write (lambda (v p w?)
                                 (fprintf p "EV ~a\nρ ~a\nι ~a\nκ ~a" (ev-e v) (ev-ρ v) (ev-ι v) (ev-κ v))))
(struct ko (v ι κ) #:transparent
  #:property prop:custom-write (lambda (v p w?)
                                 (fprintf p "KO v ~a\nι ~a\nκ ~a" (ko-v v) (ko-ι v) (ko-κ v))))
(struct letk (x e ρ) #:transparent)
(struct letreck (a e ρ) #:transparent)
(struct haltk () #:transparent)
(struct clo (λ ρ) #:transparent
  #:property prop:custom-write (lambda (v p w?)
                                 (fprintf p "<clo ~a>" («lam»-l (clo-λ v)))))
(struct prim (name proc) #:methods gen:equal+hash ((define equal-proc (lambda (s1 s2 requal?)
                                                                        (equal? (prim-name s1) (prim-name s2))))
                                                   (define hash-proc (lambda (s rhash) (equal-hash-code (prim-name s))))
                                                   (define hash2-proc (lambda (s rhash) (equal-secondary-hash-code (prim-name s))))))
(struct addr (a) #:transparent)
(struct system (states duration initial graph σ Ξ lattice answer? exit msg) #:transparent
  #:property prop:custom-write (lambda (v p w?)
                                 (fprintf p "<sys #~a ~a ~a>" (vector-length (system-states v)) (system-exit v) (~a (system-msg v) #:max-width 70))))

(struct ctx (λ ρ) #:transparent)
(struct transition (s E) #:transparent)

(struct wv (a x) #:transparent)
(struct rv (a x) #:transparent)
(struct wp (a n x) #:transparent)
(struct rp (a n x) #:transparent)
(struct fr () #:transparent)
;(struct app (clo ) #:transparent)


(define (touches d)
  (if (set? d)
      (for/fold ((as (set))) ((v d)) (set-union as (touches v)))
      (match d
        ((clo _ ρ) (env-addresses ρ))
        ((letk _ _ ρ) (env-addresses ρ))
        ((letreck _ _ ρ) (env-addresses ρ))
        ((addr a) (set a))
        ((cons x y) (set-union (touches x) (touches y)))
        (_ (set)))))
(define (reachable A σ γ)
  (let loop ((A A) (R (set)))
    (if (set-empty? A)
        R
        (let ((a (set-first A)))
          (if (set-member? R a)
              (loop (set-rest A) R)
              (let* ((v (γ (store-lookup σ a)))
                     (T (touches v)))
                (loop (set-union (set-rest A) T) (set-add R a))))))))
(define (s-referenced s Ξ)
  (match s
    ((ev e ρ ι κ) (set-union (env-addresses (↓ ρ (free e))) (stack-addresses ι κ Ξ)))
    ((ko v ι κ) (stack-addresses ι κ Ξ))))
  
;(define (gc s Ξ γ ctx-A)
;  (match s
;    ((ev e ρ σ ι κ)
;     (let* ((ρ* (↓ ρ (free e)))
 ;           (R (reachable (set-union (env-addresses ρ*) (stack-addresses ι κ ctx-A)) σ γ))
;            (σ* (↓ σ R)))
;       (ev e ρ* σ* ι κ)))
;    ((ko ι κ v σ)
;     (let* ((R (reachable (set-union (touches v) (stack-addresses ι κ ctx-A)) σ γ))
;            (σ* (↓ σ R)))
;       (ko ι κ v σ*)))))
(define (stack-frames ι κ Ξ)
  (let loop ((todo (set (cons ι κ))) (result (set)) (seen (set)))
    (if (set-empty? todo)
        result
        (match-let (((cons ι κ) (set-first todo)))
          (let* ((result* (set-union result (list->set ι))))
            (if (or (not κ) (set-member? seen κ))
                (loop (set-rest todo) result* seen)
                (let ((ικs (stack-lookup Ξ κ)))
                  (loop (set-union (set-rest todo) ικs) result* (set-add seen κ)))))))))
(define (stack-pop ι κ Ξ G)
  (if (null? ι)
      (if (set-member? G κ)
          (set)
          (let ((ικs (stack-lookup Ξ κ)))
            (apply set-union (set-map ικs (lambda (ικ) (stack-pop (car ικ) (cdr ικ) Ξ (set-add G κ)))))))
      (set (list ι κ G)))) 
(define (stack-contexts κ Ξ)
  (let loop ((todo (set (cons #f κ))) (seen (set)))
    (if (set-empty? todo)
        seen
        (let ((κ (cdr (set-first todo))))
          (if (or (not κ) (set-member? seen κ))
              (loop (set-rest todo) seen)
              (loop (set-union (set-rest todo) (stack-lookup Ξ κ)) (set-add seen κ)))))))
(define (stack-addresses ι κ Ξ)
  (for/fold ((A (set))) ((φ (stack-frames ι κ Ξ)))
    (set-union A (touches φ))))

(define (make-machine lattice alloc)

  (define α (lattice-α lattice))
  (define γ (lattice-γ lattice))
  (define ⊥ (lattice-⊥ lattice))
  (define ⊔ (lattice-⊔ lattice))
  (define true? (lattice-true? lattice))
  (define false? (lattice-false? lattice))
  (define α-eq? (lattice-eq? lattice))
  
  (define (explore e)
    (define σ (make-hash))
    (define σi 0)
    (define Ξ (make-hash))
    (define pops (make-hash))
    
    (include "primitives.rkt")
    
    (define (inject e)
      (let ((global* (append (lattice-global lattice)
                             `(("eq?" . ,(α (prim "eq?" prim-eq?)))
                               ("~a" . ,(α (prim "~a" prim-to-string)))
                               ("error" . ,(α (prim "error" prim-error)))
                               ("pair?" . ,(α (prim "pair?" prim-pair)))
                               ("cons" . ,(α (prim "cons" prim-cons)))
                               ("car" . ,(α (prim "car" prim-car)))
                               ("set-car!" . ,(α (prim "set-car!" prim-set-car!)))
                               ("cdr" . ,(α (prim "cdr" prim-cdr)))
                               ("set-cdr!" . ,(α (prim "set-cdr!" prim-set-cdr!))))))
            (compiled-e (compile e)))
        (set! conc-alloc-counter 0)
        (let loop ((global global*) (ρ (hash)))
          (match global
            ('()
             (let* ((ρ* (↓ ρ (free compiled-e)))
                    (R (reachable (env-addresses ρ*) σ γ))
                    (σ* (↓ σ R)))
               (set! σ (make-hash (hash->list σ*))) ; TODO (ugly?)
               (ev compiled-e ρ* `(,(haltk)) #f)))
            ((cons (cons x v) r)
             (let ((a (conc-alloc)))
               (hash-set! σ a v)
               (loop r (hash-set ρ x a))))))))
    
    ;(define (stack-to-string stack)
    ;  (cons (map frame->framei (car stack)) (ctx->ctxi (cdr stack))))
    
    (define (env-bind ρ x a)
      (hash-set ρ x a))
    
    (define (store-alloc! a v)
      (if (hash-has-key? σ a)
          (let* ((current (hash-ref σ a))
                 (updated (⊔ current v)))
            (unless (equal? current updated)
              (hash-set! σ a updated)
              (set! σi (add1 σi))))
          (hash-set! σ a v)))
          
    (define (store-update! a v)
      (let* ((current (hash-ref σ a))
             (updated (⊔ current v)))
        (unless (equal? current updated)
          (hash-set! σ a updated)
          (set! σi (add1 σi)))))
      
    (define (stack-alloc! κ stack)
      ;(printf "allocing ctx ~a stack ~a " (ctx->ctxi τ) (stack-to-string stack))
      (let ((stacks (hash-ref Ξ κ #f)))
        (if stacks
            (unless (set-member? stacks stack)
              ;(printf "ADDING to ~a\n" (set-map stacks stack-to-string))
              (hash-set! Ξ κ (set-add stacks stack))
              (for ((s (hash-ref pops κ (set))))
                (match s
                  ((ko v ι κ)
                   (let ((s* (ko v (car stack) (cdr stack))))
                     (hash-set! graph s (set-add (hash-ref graph s (set)) (transition s* (set))))
                     (set! todo (set-add todo s*))))))
              )
            (hash-set! Ξ κ (set stack)))))
    
    (define (alloc-literal! e)
      (if (pair? e)
          (let ((car-v (alloc-literal! (car e))))
            (let ((cdr-v (alloc-literal! (cdr e))))
              (let ((a (alloc e e)))
                (store-alloc! a (α (cons car-v cdr-v)))
                (α (addr a)))))
          (α e)))
    
    (define (eval-atom ae ρ)
      (match ae
        ((«lit» _ v)
         (values (α v) (set)))
        ((«id» _ x)
         (let ((a (env-lookup ρ x)))
           (values (store-lookup σ a) (set (rv a ae)))))
        ((«lam» _ x e)
         (let ((cl (clo ae ρ)))
           (values (α cl) (set))))
        ((«quo» _ atom)
         (values (α atom) (set)))
        (_ (error "cannot handle ae" ae))))
    
    (define (apply-let-kont x e ρ ι κ v E)
      (let* ((a (alloc x (and κ (ctx-λ κ))))
             (ρ* (env-bind ρ («id»-x x) a)))
        (store-alloc! a v)
        (set (transition (ev e ρ* ι κ) E))))
    (define (apply-letrec-kont x e ρ ι κ v E)
      (let* ((a (env-lookup ρ («id»-x x))))
        (store-update! a v)
        (set (transition (ev e ρ ι κ) E))))
    (define (apply-local-kont ι κ v E)
      (match ι
        ((cons (letk x e ρ) ι)
         (apply-let-kont x e ρ ι κ v E))
        ((cons (letreck x e ρ) ι)
         (apply-letrec-kont x e ρ ι κ v E))
        (_ (set (transition (ko v ι κ) E)))))
    
    (define (print-state q)
      (match q
       ((ev e ρ ι κ) (printf "EV ~a\nρ ~a σ ~a\nι ~a κ ~a frames ~a\n" (~a e #:max-width 40) ρ σi (map frame->framei ι) (ctx->ctxi κ) (set-map (stack-frames ι κ Ξ) frame->framei)))
        ((ko v ι κ) (printf "KO ~a σ ~a\nι ~a κ ~a frames ~a\n" v σi (map frame->framei ι) (ctx->ctxi κ) (set-map (stack-frames ι κ Ξ) frame->framei)))))
    
    (define (step q)
      ;(printf "exploring ~a\n" (state->statei q))
      ;(print-state q)
      ;(read)
      (match q
        ((ev (? ae? ae) ρ ι κ)
         (let-values (((v E) (eval-atom ae ρ)))
           (set (transition (ko v ι κ) E))))
        ((ev («if» _ ae e1 e2) ρ ι κ)
         (let-values (((v E) (eval-atom ae ρ)))
           (set-union (if (true? v)
                          (if (ae? e1)
                              (let-values (((v* E*) (eval-atom e1 ρ)))
                                (set (transition (ko v* ι κ) (set-union E E*))))
                              (set (transition (ev e1 ρ ι κ) E)))
                          (set))
                      (if (false? v)
                          (if (ae? e2)
                              (let-values (((v* E*) (eval-atom e2 ρ)))
                                (set (transition (ko v* ι κ) (set-union E E*))))
                              (set (transition (ev e2 ρ ι κ) E)))
                          (set)))))
        ((ev («let» _ x e0 e1) ρ ι κ)
         (if (ae? e0)
             (let-values  (((v E) (eval-atom e0 ρ)))
               (apply-let-kont x e1 ρ ι κ v E))
             (set (transition (ev e0 ρ (cons (letk x e1 ρ) ι) κ) (set)))))
        ((ev («letrec» _ x e0 e1) ρ ι κ)
         (let* ((a (alloc x (and κ (ctx-λ κ))))
                (ρ* (env-bind ρ («id»-x x) a)))
           (store-alloc! a ⊥)
           (if (ae? e0)
               (let-values (((v E) (eval-atom e0 ρ*)))
                 (apply-letrec-kont x e1 ρ* ι κ v E))
               (set (transition (ev e0 ρ* (cons (letreck x e1 ρ*) ι) κ) (set))))))
        ((ev («set!» _ x ae) ρ ι κ)
         (let-values (((v E) (eval-atom ae ρ)))
           (let* ((a (env-lookup ρ («id»-x x))))
             (store-update! a v)
             (set (transition (ko v ι κ) (set-add E (wv a x)))))))
        ((ev («quo» _ e) ρ ι κ)
         (let ((v (alloc-literal! e)))
           (set (transition (ko v ι κ) (set)))))
        ((ev (and («app» _ rator rands) e) ρ ι κ)
         (let-values (((v E) (eval-atom rator ρ)))
           (let rands-loop ((rands rands) (rvs '()) (E E))
             (if (null? rands)
                 (for/fold ((succ (set))) ((w (γ v)))
                   (match w
                     ((clo (and λ («lam» _ x e0)) ρ**)
                        (define (bind-loop x vs ρ*)
                          (match x
                            ('()
                             (let ((κ* (ctx λ ρ*)))
                               (stack-alloc! κ* (cons ι κ))
                               (set-add succ (transition (ev e0 ρ* '() κ*) E))))
                            ((cons x xs)
                             (if (null? vs)
                                 (set)
                                 (let ((a (alloc x e)))
                                   (store-alloc! a (car vs))
                                   (bind-loop xs (cdr vs) (env-bind ρ* («id»-x x) a)))))))                        
                        (bind-loop x (reverse rvs) ρ**))
                     ((prim name proc)
                      (set-union succ (list->set (set-map (proc e (reverse rvs) ι κ Ξ) (lambda (vE) (transition (ko (car vE) ι κ) (set-union E (cadr vE))))))))
                     ((prim2 _ proc)
                      (set-union succ (set (transition (ko (apply proc (reverse rvs)) ι κ) E))))
                     (_ (set))))
                 (let-values (((v E*) (eval-atom (car rands) ρ)))
                   (rands-loop (cdr rands) (cons v rvs) (set-union E E*)))))))
        ((ko _ (cons (haltk) _) #f)
         (set))
        ((ko v ι κ)
         (if (eq? v ⊥)
             (set)
             (let* ((ικGs (stack-pop ι κ Ξ (set))))
               (let loop ((ικGs ικGs) (succ (set)))
                 (if (set-empty? ικGs)
                     succ
                     (let* ((ικG (set-first ικGs))
                            (ι (car ικG))
                            (κ (cadr ικG))
                            (G (caddr ικG))
                            (succ* (apply-local-kont ι κ v (set))))
                       (for ((κ G))
                         (hash-set! pops κ (set-add (hash-ref pops κ (set)) q)))
                       (loop (set-rest ικGs)
                             (set-union succ succ*))))))))
        )) ; end step
    
    (define visited (mutable-set))
    (define graph (make-hash))
    (define states (mutable-set))
    (define initial (inject e))
    (define todo (set initial))
    (define (make-system duration exit msg)
      (system (list->vector (set->list states)) duration initial graph σ Ξ lattice answer? exit msg))
    
    ;(define state-limit (STATELIMIT))
    (define time-limit (+ (current-milliseconds) (* (CESK-TIMELIMIT) 60000)))
    
    (let ((start (current-milliseconds)))
      (let explore-loop ()
        (if (and (zero? (remainder (set-count states) 10000))
                 (> (current-milliseconds) time-limit))
            (make-system (- (current-milliseconds) start) 'user "time out")
            (if (set-empty? todo)
                (make-system (- (current-milliseconds) start) 'ok "")
                (let* ((q (set-first todo)))
                  (set! todo (set-rest todo))
                  (if (set-member? visited q)
                      (explore-loop)
                      (let ((old-σi σi))
                        ;(printf "q ~a\n" (state->statei q))
                        (set-add! visited q)
                        (set-add! states q)
                        (let* ((ts (step q))
                               (new-states (for/set ((t ts))
                                             ;(printf "-> ~a\n" (state->statei (transition-s t)))
                                             (transition-s t)))
                               (existing (hash-ref graph q (set)))
                               (updated (set-union existing ts)))
                          (hash-set! graph q updated)
                          (set! todo (set-union new-states todo))
                          (when (> σi old-σi)
                            (set-clear! visited))
                          (explore-loop)))))))))
                              
  ) ; end explore  
(define (answer? s)
  (match s
    ((ko _ (cons (haltk) _) _) #t)
    (_ #f)))

explore)

(define (answer-set sys)
  (let ((answer? (system-answer? sys)))
    (for/fold ((v (set))) ((s (system-states sys)))
      (if (answer? s)
          (set-add v s)
          v))))

(define (answer-value sys)
  (let* ((lattice (system-lattice sys))
         (⊥ (lattice-⊥ lattice))
         (⊔ (lattice-⊔ lattice)))
    (for/fold ((v ⊥)) ((s (answer-set sys)))
      (⊔ v (ko-v s)))))
;;

;; allocators
(define conc-alloc-counter 0)
(define conc-alloc
  (lambda _
    (set! conc-alloc-counter (add1 conc-alloc-counter))
    conc-alloc-counter))

(define (mono-alloc x _)
  x)

(define (poly-alloc x ctx)
  (cons x ctx))
;  (cons x (if ctx
;              (clo-λ (ctx-clo ctx))
;              ctx)))
;;
(define conc-mach (make-machine conc-lattice conc-alloc))
(define type-mach-0 (make-machine type-lattice mono-alloc))
(define type-mach-1 (make-machine type-lattice poly-alloc))

(define (do-eval e mach)
  (let ((sys (mach e)))
    (if (eq? (system-exit sys) 'ok)
        (answer-value sys)
        (raise (system-msg sys)))))

(define (conc-eval e)
  (do-eval e conc-mach))
(define (type-eval-0 e)
  (do-eval e type-mach-0))
(define (type-eval-1 e)
  (do-eval e type-mach-1))

(define (state-repr s)
  (match s
    ((ev e ρ ι κ) (format "~a | ~a" (~a e #:max-width 20) (ctx->ctxi κ)))
    ((ko v ι κ) (format "~a | ~a" (~a v #:max-width 20) (ctx->ctxi κ)))))

(define (generate-dot sys name)  
  (let* ((graph (system-graph sys))
         (states (system-states sys))
         (dotf (open-output-file (format "~a.dot" name) #:exists 'replace)))
    (fprintf dotf "digraph G {\n")
    (for ((i (vector-length states)))
      (let ((s (vector-ref states i)))
        (fprintf dotf "~a [label=\"~a | ~a\"];\n" i i (state-repr s))))
    (hash-for-each graph (lambda (s ts)
                           (let ((i1 (vector-member s states))
                                 (is (set-map ts (lambda (t) (vector-member (transition-s t) states)))))
                             (for-each (lambda (i2)
                                         (fprintf dotf "~a -> ~a;\n" i1 i2)) is))))
    (fprintf dotf "}")
    (close-output-port dotf))
  sys)


(define (flow-test . ens)
  (when (null? ens)
    (set! ens '(fac fib fib-mut blur eta mj09 gcipd kcfa2 kcfa3 rotate loop2 sat collatz rsa primtest factor nqueens)))
  (define (perform name e)
    (let* ((sys (type-mach-0 e))
           (flow-duration (system-duration sys))
           (flow-state-count (vector-length (system-states sys)))
           (flow-exit (system-exit sys))
           (flow-msg (if (eq? flow-exit 'ok) (answer-value sys) (system-msg sys))))
      (printf "~a states ~a time ~a | ~a\n"
              (~a name #:min-width 12)
              (~a (if (eq? flow-exit 'ok) flow-state-count (format ">~a" flow-state-count)) #:min-width 7)
              (~a flow-duration #:min-width 7)
              (~a flow-msg #:max-width 72))))
  (for-each (lambda (en) (perform en (eval en)))
            ens))

(define (server-flow-test)
  (parameterize ((CESK-TIMELIMIT 60))
    (apply flow-test '(fac fib fib-mut blur eta mj09 gcipd kcfa2 kcfa3 rotate loop2
                           sat collatz rsa primtest factor nqueens dderiv boyer mceval))))