#lang racket

(require "general.rkt")
(require "ast.rkt")
(require "lattice.rkt")
(require "cesk.rkt")
(require "test.rkt")
(require "purity.rkt")

(define purity3 '(let ((z #f)) (let ((f (lambda () (let ((g (lambda () (let ((h (lambda () (set! z #t)))) (h))))) (g))))) (f))))
(define purity4 '(let ((f (lambda () (let ((z #f)) (let ((g (lambda () (let ((h (lambda () (set! z #t)))) (h))))) (g)))))) (f)))
(define purity7 '(let ((z #f)) (let ((f (lambda () z))) (let ((u (f))) (let ((v (set! z #t))) (f))))))
(define purity8 '(let ((f (lambda () (let ((x 1)) (let ((g (lambda () x))) (let ((u (g))) (let ((v (set! x 5))) (g)))))))) (f)))
(define purity14 '(let ((f (lambda () (let ((o (cons 1 2))) (let ((g (lambda () (set-car! o 3)))) (let ((u (g))) (car o))))))) (f)))
(define purity18 '(let ((g (lambda (p) (set-cdr! p 3)))) (let ((f (lambda () (let ((o (cons 1 2))) (let ((u (g o))) (cdr o)))))) (f))))
(define purity22 '(let ((g (lambda (p) (set-cdr! p 3) ))) (let ((f (lambda (h) (let ((o (cons 1 2))) (let ((u (h o))) (cdr o)))))) (f g))))
(define purity29 '(let ((o (cons 1 2))) (let ((f (lambda () (cdr o)))) (let ((u (f))) (let ((v (set-cdr! o 3))) (f))))))
(define purity31 '(let ((z (cons 1 2))) (let ((f (lambda () (let ((o (cons 3 4))) (let ((g (lambda () (set! o z)))) (let ((u (g))) (set-car! o 5))))))) (f))))
(define purity32 '(let ((o (cons 1 2))) (let ((f (lambda () (let ((g (lambda () (set-cdr! o 3)))) (let ((u (g))) (cdr o)))))) (f))))
(define purity33 '(let ((f (lambda () (let ((o (cons 1 2))) (let ((g (lambda (p) (set-car! p 3)))) (g o)))))) (f)))
(define purity35 '(let ((f (lambda (p) (let ((u (if p (set-car! p 3) (let ((pp (cons 4 5))) (set! p pp))))) p)))) (let ((o (f #f))) (f o))))
(define purity36 '(let ((f (lambda () (let ((x 10)) (let ((g (lambda () x))) (let ((u x)) (let ((v (g))) (let ((w (set! x 11))) (g))))))))) (f)))
(define purity37 '(let ((f (lambda () (let ((o (cons 1 2))) (let ((g (lambda () (car o)))) (let ((u (car o))) (let ((v (g))) (let ((w (set-car! o 3))) (g))))))))) (f)))
(define purity43 '(letrec ((f (lambda (n) (let ((c (zero? n))) (if c 'done (let ((z #f)) (let ((g (lambda () (let ((u (set! z #t))) (let ((nn (- n 1))) (f nn)))))) (g)))))))) (f 4)))
(define purity49 '(letrec ((f (lambda (n) (let ((c (zero? n))) (if c 'done (let ((o (cons 1 2))) (let ((g (lambda () (set-car! o 3)))) (let ((u (g))) (let ((v (car o))) (let ((nn (- n 1))) (f nn))))))))))) (f 4)))
(define purity55 '(let ((o (cons 1 2))) (letrec ((f (lambda (n) (let ((c (zero? n))) (if c 'done (let ((p (cons 1 2))) (let ((u (set-cdr! p 3))) (let ((v (set! p o))) (let ((w (set-cdr! p 4))) (let ((nn (- n 1))) (f nn))))))))))) (f 4))))
(define purity46 '(letrec ((f (lambda (n) (let ((c (zero? n))) (if c 'done (let ((m (- n 1))) (let ((u (set! n m))) (f n)))))))) (f 4)))
(define purity54 '(letrec ((f (lambda (n) (let ((c (zero? n))) (if c 'done (let ((o (cons 1 2))) (let ((u (set-car! o 3))) (let ((nn (- n 1))) (let ((v (f nn))) o))))))))) (f 4)))
(define purity67 '(letrec ((f (lambda (b) (if b (let ((z (cons 1 2))) (let ((g (lambda () (set-cdr! z 3)))) (let ((u (g))) (let ((uu (f #f))) z)))) 'done)))) (f #t)))

(define test-fac (list fac (set)))
(define test-fib (list fib (set)))
(define test-fib-mut (list fib-mut (set) (set GENERATES OBSERVES)))
(define test-blur (list blur (set) (set) (set)))
(define test-eta (list eta (set) (set) (set) (set)))
(define test-mj09 (list mj09 (set) (set) (set) (set)))
(define test-gcipd (list gcipd (set) (set) (set)))
(define test-kcfa2 (list kcfa2 (set) (set) (set)))
(define test-kcfa3 (list kcfa3 (set) (set) (set) (set)))
(define test-rotate (list rotate (set)))
(define test-loop2 (list loop2 (set) (set) (set)))
(define test-sat (list sat (set) (set) (set) (set) (set) (set) (set)))
(define test-collatz (list collatz (set) (set) (set) (set) (set)))
(define test-rsa (list rsa (set) (set) (set) (set) (set) (set) (set) (set) (set)))
(define test-primtest (list primtest  (set) (set) (set) (set)))
(define test-factor (list factor (set) (set) (set) (set) (set) (set) (set)))
(define test-nqueens (list nqueens (set) (set) (set) (set) (set) (set)))
(define test-dderiv (list dderiv (set) (set) (set) (set) (set) (set GENERATES OBSERVES) (set) (set) (set) (set)))
(define test-destruct (list destruct (set OBSERVES) (set OBSERVES GENERATES) (set GENERATES) (set) (set) (set OBSERVES GENERATES) (set OBSERVES GENERATES) (set) (set OBSERVES GENERATES) (set GENERATES) (set GENERATES)))
(define test-grid (list grid (set) (set) (set GENERATES) (set OBSERVES) (set GENERATES)))
(define test-mceval (list mceval (set) (set) (set) (set) (set) (set) (set) (set) (set) (set) (set) (set) (set) (set) (set) (set) (set) (set) (set) (set) (set) (set) (set) (set) (set)
                          (set) (set) (set) (set) (set) (set) (set) (set) (set) (set) (set) (set) (set) (set) (set) (set) (set) (set) (set) (set) (set OBSERVES) (set OBSERVES)
                          (set OBSERVES GENERATES) (set) (set) (set) (set) (set GENERATES) (set GENERATES) (set GENERATES) (set OBSERVES GENERATES) (set OBSERVES GENERATES) (set) (set)
                          (set) (set) (set) (set) (set) (set) (set OBSERVES GENERATES) (set OBSERVES GENERATES) (set) (set) (set GENERATES) (set OBSERVES GENERATES) (set)))



(define (purity-test . names)
  (when (null? names)
    (set! names '(test-fib test-fib-mut test-blur test-eta test-mj09 test-gcipd test-kcfa2 test-kcfa3 test-rotate test-loop2
                           test-sat test-collatz test-rsa test-primtest test-factor)))                    ;treenode1 treeadd treeadd2 treeadd3 purity19 grid)))
  (perform-purity-test (map (lambda (name) (cons name (eval name))) names)))

(define (server-purity-test . names)
  (when (null? names)
    (set! names '(test-fib test-nqueens test-dderiv test-destruct test-grid test-mceval)))
  (parameterize ((CESK-TIMELIMIT 60) (THROW #f))
    (let ((results (apply purity-test names))) 
      (printf "Done.\n")
      results)))


#|
        (cons 1 (cons '(let ((z #f)) (let ((f (lambda () (set! z #t)))) (f))) '((5 . "PROC"))))
        (cons 2 (cons '(let ((z #f)) (let ((h (lambda () (set! z #t)))) (let ((g (lambda () (h)))) (let ((f (lambda () (g)))) (f))))) '((5 . "PROC") (11 . "PROC") (16 . "PROC"))))
        (cons 3 (cons '(let ((z #f)) (let ((f (lambda () (let ((g (lambda () (let ((h (lambda () (set! z #t)))) (h))))) (g))))) (f))) '((5 . "PROC") (8 . "PROC") (11 . "PROC"))))
        (cons 4 (cons '(let ((f (lambda () (let ((z #f)) (let ((g (lambda () (let ((h (lambda () (set! z #t)))) (h))))) (g)))))) (f)) '((2 . "PURE") (8 . "PROC") (11 . "PROC"))))
        (cons 5 (cons '(let ((f (lambda (x) (let ((xx #f)) (let ((u (set! xx x))) xx))))) (let ((v (f 123))) (f v))) '((2 . "PURE"))))
        (cons 6 (cons '(let ((z #f)) (let ((f (lambda () z))) (let ((u (f))) (set! z #t)))) '((5 . "PURE"))))
        (cons 7 (cons '(let ((z #f)) (let ((f (lambda () z))) (let ((u (f))) (let ((v (set! z #t))) (f))))) '((5 . "OBS"))))
        (cons 8 (cons '(let ((f (lambda () (let ((x 1)) (let ((g (lambda () x))) (let ((u (g))) (let ((v (set! x 5))) (g)))))))) (f)) '((2 . "PURE") (8 . "OBS"))))
        (cons 9 (cons '(let ((f (lambda () (let ((x 1)) (let ((g (lambda () x))) (let ((uu x)) (let ((u (g))) (let ((v (set! x 5))) (g))))))))) (f)) '((2 . "PURE") (8 . "OBS"))))
        (cons 10 (cons '(let ((f (lambda () (let ((o (cons 1 2))) (set-car! o 3))))) (f)) '((2 . "PURE"))))
        (cons 11 (cons '(let ((f (lambda () (let ((g (lambda () (cons 1 2)))) (let ((o (g))) (car o)))))) (f)) '((2 . "PURE") (5 . "PURE"))))
        (cons 12 (cons '(let ((f (lambda () (let ((o (cons 1 2))) (set-car! o 3))))) (f)) '((2 . "PURE"))))
        (cons 13 (cons '(let ((f (lambda () (let ((o (cons 1 2))) (set-cdr! o 3))))) (f)) '((2 . "PURE"))))
        (cons 14 (cons '(let ((f (lambda () (let ((o (cons 1 2))) (let ((g (lambda () (set-car! o 3)))) (let ((u (g))) (car o))))))) (f)) '((2 . "PURE") (10 . "PROC"))))
        (cons 15 (cons '(let ((f (lambda () (let ((o (cons 1 2))) (let ((g (lambda () (set-cdr! o 3)))) (let ((u (g))) (car o))))))) (f)) '((2 . "PURE") (10 . "PROC"))))
        (cons 16 (cons '(let ((f (lambda () (let ((g (lambda () (let ((o (cons 1 2))) o)))) (let ((p (g))) (car p)))))) (f)) '((2 . "PURE") (5 . "PURE"))))
        (cons 17 (cons '(let ((f (lambda () (let ((g (lambda () (let ((o (cons 1 2))) o)))) (let ((p (g))) p))))) (f)) '((2 . "PURE") (5 . "PURE"))))
        (cons 18 (cons '(let ((g (lambda (p) (set-cdr! p 3)))) (let ((f (lambda () (let ((o (cons 1 2))) (let ((u (g o))) (cdr o)))))) (f))) '((2 . "PROC") (9 . "PURE"))) )
        (cons 19 (cons '(let ((o (cons 1 2))) (let ((f (lambda (p) p))) (f o))) '((7 . "PURE"))))
        (cons 20 (cons '(let ((g (lambda () (cons 1 2)))) (let ((f (lambda () (g)))) (f))) '((2 . "PURE") (8 . "PURE"))))
        (cons 21 (cons '(let ((g (lambda () (cons 1 2)))) (let ((f (lambda (h) (let ((o (h))) (car o))))) (f g))) '((2 . "PURE") (8 . "PURE"))))
        (cons 22 (cons '(let ((g (lambda (p) (set-cdr! p 3) ))) (let ((f (lambda (h) (let ((o (cons 1 2))) (let ((u (h o))) (cdr o)))))) (f g))) '((2 . "PROC") (9 . "PURE"))))
        (cons 23 (cons '(let ((f (lambda () (let ((g (lambda () (let ((a 123)) a)))) (g))))) (f)) '((2 . "PURE") (5 . "PURE"))))
        (cons 24 (cons '(let ((g (lambda () (let ((a 3)) a)))) (let ((f (lambda () (g)))) (f))) '((2 . "PURE") (9 . "PURE"))))
        (cons 25 (cons '(let ((g (lambda () (let ((a 3)) a)))) (let ((f (lambda (h) (h)))) (f g))) '((2 . "PURE") (9 . "PURE"))))
        (cons 26 (cons '(let ((x (cons 2 3))) (let ((o (cons 1 x))) (let ((f (lambda () (let ((ox (cdr o))) (set-car! ox 4))))) (f)))) '((12 . "PROC"))))
        (cons 27 (cons '(let ((f (lambda () (let ((g (lambda () (let ((o (cons 1 2))) (let ((u (cdr o))) (let ((v (set-car! o u))) o)))))) (let ((p (g))) (car p)))))) (f)) '((2 . "PURE") (5 . "PURE"))))
        (cons 28 (cons '(let ((z #f)) (let ((x #t)) (let ((f (lambda () z))) (let ((u (f))) (let ((v (set! x z))) (f)))))) '((8 . "PURE"))))
        (cons 29 (cons '(let ((o (cons 1 2))) (let ((f (lambda () (cdr o)))) (let ((u (f))) (let ((v (set-cdr! o 3))) (f))))) '((7 . "OBS"))))
        (cons 30 (cons '(let ((f (lambda (x) (let ((xx x)) xx)))) (let ((p (f 123))) (f p))) '((2 . "PURE"))))
        (cons 32 (cons '(let ((o (cons 1 2))) (let ((f (lambda () (let ((g (lambda () (set-cdr! o 3)))) (let ((u (g))) (cdr o)))))) (f))) '((7 . "PROC") (10 . "PROC"))))
        (cons 33 (cons '(let ((f (lambda () (let ((o (cons 1 2))) (let ((g (lambda (p) (set-car! p 3)))) (g o)))))) (f)) '((10 . "PROC") (2 . "PURE"))))
        (cons 34 (cons '(let ((f (lambda () (let ((o (cons 1 2))) (let ((h (lambda (q) (set-cdr! q 3)))) (let ((g (lambda (p) (h p)))) (g o))))))) (f)) '((2 . "PURE") (10 . "PROC") (17 . "PROC"))))
        (cons 35 (cons '(let ((f (lambda (p) (let ((u (if p (set-car! p 3) (let ((pp (cons 4 5))) (set! p pp))))) p)))) (let ((o (f #f))) (f o))) '((2 . "PROC"))))
        (cons 36 (cons '(let ((f (lambda () (let ((x 10)) (let ((g (lambda () x))) (let ((u x)) (let ((v (g))) (let ((w (set! x 11))) (g))))))))) (f)) '((2 . "PURE") (8 . "OBS"))))
        (cons 37 (cons '(let ((f (lambda () (let ((o (cons 1 2))) (let ((g (lambda () (car o)))) (let ((u (car o))) (let ((v (g))) (let ((w (set-car! o 3))) (g))))))))) (f)) '((2 . "PURE") (10 . "OBS"))))
        (cons 38 (cons treenode1 '((2 . "PURE") (20 . "PURE"))))
        (cons 39 (cons '(let ((f (lambda () (cons 1 2)))) (f)) '((2 . "PURE"))))
        (cons 40 (cons '(let ((f (lambda () (cons 1 2)))) (let ((p (f))) (set-car! p 9))) '((2 . "PURE"))))
        (cons 41 (cons '(let ((g (lambda () (let ((a 3)) a)))) (let ((f (lambda (h) (h)))) (letrec ((l (lambda (n) (let ((c (zero? n))) (if c 'done (let ((u (f g))) (let ((nn (- n 1))) (l nn)))))))) (l 4)))) '((2 . "PURE") (9 . "PURE") (15 . "PURE"))))
        (cons 42 (cons '(let ((g (lambda (p) (set-cdr! p 3)))) (letrec ((f (lambda (n) (let ((c (zero? n))) (if c 'done (let ((o (cons 1 2))) (let ((u (g o))) (let ((v (cdr o))) (let ((nn (- n 1))) (f nn)))))))))) (f 4))) '((2 . "PROC") (9 . "PURE"))))
        (cons 43 (cons '(letrec ((f (lambda (n) (let ((c (zero? n))) (if c 'done (let ((z #f)) (let ((g (lambda () (let ((u (set! z #t))) (let ((nn (- n 1))) (f nn)))))) (g)))))))) (f 4)) '((2 . "PURE") (17 . "PROC"))))
        (cons 44 (cons '(letrec ((f (lambda (n) (let ((c (zero? n))) (if c 'done (let ((z #f)) (let ((g (lambda () (set! z #t)))) (let ((u (g))) (let ((nn (- n 1))) (f nn)))))))))) (f 4)) '((2 . "PURE") (17 . "PROC"))))
        (cons 45 (cons '(letrec ((f (lambda (n) (let ((c (zero? n))) (if c 'done (let ((m (- n 1))) (f m))))))) (f 4)) '((2 . "PURE"))))
        (cons 46 (cons '(letrec ((f (lambda (n) (let ((c (zero? n))) (if c 'done (let ((m (- n 1))) (let ((u (set! n m))) (f n)))))))) (f 4)) '((2 . "PURE"))))
        (cons 47 (cons '(letrec ((f (lambda (m n) (let ((c (zero? n))) (if c 'done (let ((u (set! m 333))) (let ((nn (- n 1))) (f m nn)))))))) (f 123 4)) '((2 . "PURE"))))
        (cons 48 (cons '(letrec ((f (lambda (n) (let ((c (zero? n))) (if c 'done (let ((o (cons 1 2))) (let ((u (set-car! o 3))) (let ((nn (- n 1))) (f nn))))))))) (f 4)) '((2 . "PURE"))))
        (cons 49 (cons '(letrec ((f (lambda (n) (let ((c (zero? n))) (if c 'done (let ((o (cons 1 2))) (let ((g (lambda () (set-car! o 3)))) (let ((u (g))) (let ((v (car o))) (let ((nn (- n 1))) (f nn))))))))))) (f 4)) '((2 . "PURE") (19 . "PROC"))))
        (cons 50 (cons '(letrec ((f (lambda (n) (let ((c (zero? n))) (if c 'done (let ((p (- n 1))) (f p))))))) (f 4)) '((2 . "PURE"))))
        (cons 51 (cons '(letrec ((f (lambda (n) (let ((c (zero? n))) (if c 'done (let ((o (cons 1 2))) (let ((u (set-car! o 3))) (let ((nn (- n 1))) (f nn))))))))) (f 4)) '((2 . "PURE"))))
        (cons 52 (cons '(letrec ((f (lambda (n p) (let ((c (zero? n))) (if c 'done (let ((pp (cons 1 2))) (let ((u (set-car! pp p))) (let ((nn (- n 1))) (f nn pp))))))))) (f 4 3)) '((2 . "PURE"))))
        (cons 53 (cons '(letrec ((f (lambda (n p) (let ((c (zero? n))) (if c 'done (let ((o (cons 1 p))) (let ((u (set-car! o 3))) (let ((nn (- n 1))) (f nn o))))))))) (f 4 2)) '((2 . "PURE"))))
        (cons 54 (cons '(letrec ((f (lambda (n) (let ((c (zero? n))) (if c 'done (let ((o (cons 1 2))) (let ((u (set-car! o 3))) (let ((nn (- n 1))) (let ((v (f nn))) o))))))))) (f 4)) '((2 . "PURE"))))
        (cons 55 (cons '(let ((o (cons 1 2))) (letrec ((f (lambda (n) (let ((c (zero? n))) (if c 'done (let ((p (cons 1 2))) (let ((u (set-cdr! p 3))) (let ((v (set! p o))) (let ((w (set-cdr! p 4))) (let ((nn (- n 1))) (f nn))))))))))) (f 4))) '((7 . "PROC"))))
        (cons 56 (cons '(let ((o (cons 1 2))) (letrec ((f (lambda (n) (let ((c (zero? n))) (if c 'done (let ((p (cons 1 2))) (let ((u (set-cdr! p 3))) (let ((p o)) (let ((w (set-cdr! p 4))) (let ((nn (- n 1))) (f nn))))))))))) (f 4))) '((7 . "PROC"))))
        (cons 57 (cons '(let ((o (cons 1 2))) (letrec ((f (lambda (n) (let ((c (zero? n))) (if c 'done (let ((p o)) (let ((pp (cons 1 2))) (let ((v (set! p pp))) (let ((w (set-cdr! p 4))) (let ((nn (- n 1))) (f nn))))))))))) (f 4))) '((7 . "PURE"))))
        (cons 58 (cons '(let ((o (cons 1 2))) (letrec ((f (lambda (n) (let ((c (zero? n))) (if c 'done (let ((p o)) (let ((pp (cons 1 2))) (let ((p pp)) (let ((w (set-cdr! p 4))) (let ((nn (- n 1))) (f nn))))))))))) (f 4))) '((7 . "PURE"))))
        (cons 59 (cons '(let ((g (lambda (p) (set-cdr! p 3) ))) (let ((f (lambda (h) (let ((o (cons 1 2))) (let ((u (h o))) (cdr o)))))) (letrec ((l (lambda (n) (let ((c (zero? n))) (if c 'done (let ((v (f g))) (let ((nn (- n 1))) (l nn)))))))) (l 4)))) '((2 . "PROC") (9 . "PURE") (25 . "PURE"))))
        (cons 60 (cons '(let ((f (lambda (h) (h)))) (let ((z #t)) (let ((g (lambda () (set! z #f)))) (f g)))) '((2 . "PROC") (11 . "PROC"))))
        ;add to JS ==>
        (cons 61 (cons '(letrec ((f (lambda (h) (let ((z #t)) (if h (h) (f (lambda () (set! z #f)))))))) (f #f)) '((2 . "PROC") (13 . "PROC"))))
        (cons 62 (cons '(letrec ((f (lambda (h) (let ((z (cons 1 2))) (if h (h) (f (lambda () (set-car! z 3)))))))) (f #f)) '((2 . "PROC") (15 . "PROC"))))
        (cons 63 (cons '(letrec ((f (lambda (b) (if b (let ((x (let ((y (cons 1 2))) y))) (let ((u (set-car! x 3))) (f #f))) 'done)))) (f #t)) '((2 . "PURE"))))
        (cons 64 (cons grid '((244 . "PROC") (172 . "OBS") (55 . "PURE") (2 . "PURE") (111 . "PROC"))))
        (cons 65 (cons '(letrec ((f (lambda (b) (if b (let ((x (let ((y (cons 1 2))) y))) (let ((u (set-car! x 3))) (let ((uu (f #f))) x))) 'done)))) (f #t)) '((2 . "PURE"))))
        (cons 66 (cons '(letrec ((f (lambda (p) (let ((o (cons 1 2))) (if p (set-cdr! p 3) (f o)))))) (f #f)) '((2 . "PROC"))))
        (cons 67 (cons '(letrec ((f (lambda (b) (if b (let ((z (cons 1 2))) (let ((g (lambda () (set-cdr! z 3)))) (let ((u (g))) (let ((uu (f #f))) z)))) 'done)))) (f #t)) '((2 . "PURE") (13 . "PROC"))))        
        ))


(define abstract-tests
  (list (cons 'a1 (cons '(letrec ((f (lambda () (let ((z #f)) (let ((g (lambda () (let ((u (set! z #t))) (f))))) (g)))))) (f)) '((2 . "PURE") (8 . "PROC"))))
        (cons 'a2 (cons '(letrec ((f (lambda () (let ((z #f)) (let ((g (lambda () (set! z #t)))) (let ((u (g))) (f))))))) (f)) '((2 . "PURE") (8 . "PROC"))))
        (cons 'a3 (cons '(letrec ((f (lambda (n) (let ((m (- n 1))) (f m))))) (f 123)) '((2 . "PURE"))))
        (cons 'a4 (cons '(letrec ((f (lambda (n) (let ((m (- n 1))) (let ((u (set! n m))) (f n)))))) (f 123)) '((2 . "PURE"))))
        (cons 'a5 (cons '(letrec ((f (lambda (n) (let ((u (set! n 333))) (f n))))) (f 123)) '((2 . "PURE"))))
        (cons 'a6 (cons '(letrec ((f (lambda (n) (let ((u (set! n 333))) (f n))))) (f 123)) '((2 . "PURE"))))
        (cons 'a7 (cons '(letrec ((f (lambda () (let ((o (cons 1 2))) (let ((u (set-car! o 3))) (f)))))) (f)) '((2 . "PURE"))))
        (cons 'a8 (cons '(letrec ((f (lambda () (let ((o (cons 1 2))) (let ((g (lambda () (set-car! o 3)))) (let ((u (g))) (let ((v (car o))) (f)))))))) (f)) '((2 . "PURE") (10 . "PROC"))))
        (cons 'a9 (cons '(let ((g (lambda (p) (set-cdr! p 3)))) (letrec ((f (lambda () (let ((o (cons 1 2))) (let ((u (g o))) (let ((v (cdr o))) (f))))))) (f))) '((2 . "PROC") (9 . "PURE"))))
        (cons 'a10 (cons '(let ((g (lambda (p) (set-cdr! p 3) ))) (let ((f (lambda (h) (let ((o (cons 1 2))) (let ((u (h o))) (cdr o)))))) (letrec ((l (lambda () (let ((v (f g))) (l))))) (l)))) '((2 . "PROC") (9 . "PURE") (25 . "PURE"))))
        (cons 'a11 (cons '(let ((g (lambda () (let ((a 3)) a)))) (let ((f (lambda (h) (h)))) (letrec ((l (lambda () (let ((u (f g))) (l))))) (l)))) '((2 . "PURE") (9 . "PURE") (15 . "PURE"))))
        (cons 'a12 (cons '(letrec ((f (lambda (n) (let ((p (- n 1))) (f p))))) (f 123)) '((2 . "PURE"))))
        (cons 'a13 (cons '(letrec ((f (lambda () (let ((o (cons 1 2))) (let ((u (set-car! o 3))) (f)))))) (f)) '((2 . "PURE"))))
        (cons 'a14 (cons '(letrec ((f (lambda (p) (let ((pp (cons 1 2))) (let ((u (set-car! pp p))) (f pp)))))) (f 3)) '((2 . "PURE"))))
        (cons 'a15 (cons '(letrec ((f (lambda (p) (let ((o (cons 1 p))) (let ((u (set-car! o 3))) (f o)))))) (f 2)) '((2 . "PURE"))))
        (cons 'a16 (cons '(letrec ((f (lambda () (let ((o (cons 1 2))) (let ((u (set-car! o 3))) (let ((v (f))) o)))))) (f)) '((2 . "PURE"))))
        (cons 'a17 (cons '(let ((o (cons 1 2))) (letrec ((f (lambda () (let ((p (cons 1 2))) (let ((u (set-cdr! p 3))) (let ((v (set! p o))) (let ((w (set-cdr! p 4))) (f)))))))) (f))) '((7 . "PROC"))))
        (cons 'a19 (cons '(let ((o (cons 1 2))) (letrec ((f (lambda () (let ((p (cons 1 2))) (let ((u (set-cdr! p 3))) (let ((p o)) (let ((w (set-cdr! p 4))) (f)))))))) (f))) '((7 . "PROC"))))
        (cons 'a20 (cons '(let ((o (cons 1 2))) (letrec ((f (lambda () (let ((p o)) (let ((pp (cons 1 2))) (let ((v (set! p pp))) (let ((w (set-cdr! p 4))) (f)))))))) (f))) '((7 . "PURE"))))
        (cons 'a21 (cons '(let ((o (cons 1 2))) (letrec ((f (lambda () (let ((p o)) (let ((pp (cons 1 2))) (let ((p pp)) (let ((w (set-cdr! p 4))) (f)))))))) (f))) '((7 . "PURE"))))
        ))        

(define path-tests
  (list (cons 100 (cons '(let ((z #t)) (let ((f (lambda (q) (let ((r 0)) (let ((u (if z (let ((p (cons 1 2))) (set! r p)) (set! r q)))) (set-car! r 3)))))) (let ((o (cons 4 5))) (f o)))) '((2 . "PROC") (10 . "PURE") (28 . "PURE"))))
        ))
|#
