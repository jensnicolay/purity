#lang racket

(require "general.rkt")
(require "ast.rkt")
(require "lattice.rkt")
(require "cesk.rkt")
(require "test.rkt")
(require "purity.rkt")

(define (conc-address-test-handler e)
  (let* ((sys (conc-mach e))
         (F (extend-to-applied (address-purity-analysis sys) (system-Ξ sys)))
         (C (F->C F))
         (C* (make-hash (hash-map C (lambda (k v) (cons («lam»-l k) v))))))
    C*))
    
(define (conc-purity-test)
  (define (test e expected)
    (let ((C (conc-address-test-handler e)))
      (unless (equal? (make-hash expected) C)
        (printf "error ~a CONC\n~a ~a\n" e expected C))))

  (test fac '((2 . "PURE")))
  (test fib '((2 . "PURE")))
  (test fib-mut '((2 . "PURE") (12 . "PROC")))
  (test blur '((2 . "PURE") (7 . "PURE") (12 . "PURE")))
  (test eta '((29 . "PURE") (17 . "PURE") (6 . "PURE") (2 . "PURE")))
  (test mj09 '((6 . "PURE") (11 . "PURE") (25 . "PURE") (2 . "PURE")))
  (test gcipd '((2 . "PURE") (7 . "PURE") (35 . "PURE")))
  (test kcfa2 '((2 . "PURE") (6 . "PURE") (10 . "PURE")))
  (test kcfa3 '((2 . "PURE") (6 . "PURE") (10 . "PURE") (14 . "PURE")))
  (test rotate '((2 . "PURE")))
  (test loop2 '((2 . "PURE") (16 . "PURE") (57 . "PURE")))
  (test '(let ((z #f)) (let ((f (lambda () (set! z #t)))) (f))) '((5 . "PROC")))
  (test '(let ((z #f)) (let ((h (lambda () (set! z #t)))) (let ((g (lambda () (h)))) (let ((f (lambda () (g)))) (f))))) '((5 . "PROC") (11 . "PROC") (16 . "PROC")))
  (test '(let ((z #f)) (let ((f (lambda () (let ((g (lambda () (let ((h (lambda () (set! z #t)))) (h))))) (g))))) (f))) '((5 . "PROC") (8 . "PROC") (11 . "PROC")))
  (test '(let ((f (lambda () (let ((z #f)) (let ((g (lambda () (let ((h (lambda () (set! z #t)))) (h))))) (g)))))) (f)) '((2 . "PURE") (8 . "PROC") (11 . "PROC")))
  (test '(let ((f (lambda (x) (let ((xx #f)) (let ((u (set! xx x))) xx))))) (let ((v (f 123))) (f v))) '((2 . "PURE")))
  (test '(let ((z #f)) (let ((f (lambda () z))) (let ((u (f))) (set! z #t)))) '((5 . "PURE")))
  (test '(let ((z #f)) (let ((f (lambda () z))) (let ((u (f))) (let ((v (set! z #t))) (f))))) '((5 . "OBS")))
  (test '(let ((f (lambda () (let ((x 1)) (let ((g (lambda () x))) (let ((u (g))) (let ((v (set! x 5))) (g)))))))) (f)) '((2 . "PURE") (8 . "OBS")))
  (test '(let ((f (lambda () (let ((x 1)) (let ((g (lambda () x))) (let ((uu x)) (let ((u (g))) (let ((v (set! x 5))) (g))))))))) (f)) '((2 . "PURE") (8 . "OBS")))
  (test '(let ((f (lambda () (let ((o (cons 1 2))) (set-car! o 3))))) (f)) '((2 . "PURE")))
  (test '(let ((f (lambda () (let ((g (lambda () (cons 1 2)))) (let ((o (g))) (car o)))))) (f)) '((2 . "PURE") (5 . "PURE")))
  (test '(let ((f (lambda () (let ((o (cons 1 2))) (set-car! o 3))))) (f)) '((2 . "PURE")))
  (test '(let ((f (lambda () (let ((o (cons 1 2))) (set-cdr! o 3))))) (f)) '((2 . "PURE")))
  (test '(let ((f (lambda () (let ((o (cons 1 2))) (let ((g (lambda () (set-car! o 3)))) (let ((u (g))) (car o))))))) (f)) '((2 . "PURE") (11 . "PROC")))
  (test '(let ((f (lambda () (let ((o (cons 1 2))) (let ((g (lambda () (set-cdr! o 3)))) (let ((u (g))) (car o))))))) (f)) '((2 . "PURE") (11 . "PROC")))
  (test '(let ((f (lambda () (let ((g (lambda () (let ((o (cons 1 2))) o)))) (let ((p (g))) (car p)))))) (f)) '((2 . "PURE") (5 . "PURE")))
  (test '(let ((f (lambda () (let ((g (lambda () (let ((o (cons 1 2))) o)))) (let ((p (g))) p))))) (f)) '((2 . "PURE") (5 . "PURE")))
  (test '(let ((g (lambda (p) (set-cdr! p 3)))) (let ((f (lambda () (let ((o (cons 1 2))) (let ((u (g o))) (cdr o)))))) (f))) '((2 . "PROC") (10 . "PURE"))) 
  (test '(let ((o (cons 1 2))) (let ((f (lambda (p) p))) (f o))) '((8 . "PURE")))
  (test '(let ((g (lambda () (cons 1 2)))) (let ((f (lambda () (g)))) (f))) '((2 . "PURE") (9 . "PURE")))
  (test '(let ((g (lambda () (cons 1 2)))) (let ((f (lambda (h) (let ((o (h))) (car o))))) (f g))) '((2 . "PURE") (9 . "PURE")))
  (test '(let ((g (lambda (p) (set-cdr! p 3) ))) (let ((f (lambda (h) (let ((o (cons 1 2))) (let ((u (h o))) (cdr o)))))) (f g))) '((2 . "PROC") (10 . "PURE")))
  (test '(let ((f (lambda () (let ((g (lambda () (let ((a 123)) a)))) (g))))) (f)) '((2 . "PURE") (5 . "PURE")))
  (test '(let ((g (lambda () (let ((a 3)) a)))) (let ((f (lambda () (g)))) (f))) '((2 . "PURE") (9 . "PURE")))
  (test '(let ((g (lambda () (let ((a 3)) a)))) (let ((f (lambda (h) (h)))) (f g))) '((2 . "PURE") (9 . "PURE")))
  (test '(let ((x (cons 2 3))) (let ((o (cons 1 x))) (let ((f (lambda () (let ((ox (cdr o))) (set-car! ox 4))))) (f)))) '((14 . "PROC")))
  (test '(let ((f (lambda () (let ((g (lambda () (let ((o (cons 1 2))) (let ((u (cdr o))) (let ((v (set-car! o u))) o)))))) (let ((p (g))) (car p)))))) (f)) '((2 . "PURE") (5 . "PURE")))
  (test '(let ((z #f)) (let ((x #t)) (let ((f (lambda () z))) (let ((u (f))) (let ((v (set! x z))) (f)))))) '((8 . "PURE")))
  (test '(let ((o (cons 1 2))) (let ((f (lambda () (cdr o)))) (let ((u (f))) (let ((v (set-cdr! o 3))) (f))))) '((8 . "OBS")))
  (test '(let ((f (lambda (x) (let ((xx x)) xx)))) (let ((p (f 123))) (f p))) '((2 . "PURE")))
  (test '(let ((f (lambda () (let ((x 1)) (let ((g (lambda () x))) (let ((u (g))) (let ((v (set! x 5))) (g)))))))) (f)) '((2 . "PURE") (8 . "OBS")))
  (test '(let ((o (cons 1 2))) (let ((f (lambda () (let ((g (lambda () (set-cdr! o 3)))) (let ((u (g))) (cdr o)))))) (f))) '((8 . "PROC") (11 . "PROC")))
  (test '(let ((f (lambda () (let ((o (cons 1 2))) (let ((g (lambda (p) (set-car! p 3)))) (g o)))))) (f)) '((11 . "PROC") (2 . "PURE")))
  (test '(let ((f (lambda () (let ((o (cons 1 2))) (let ((h (lambda (q) (set-cdr! q 3)))) (let ((g (lambda (p) (h p)))) (g o))))))) (f)) '((2 . "PURE") (11 . "PROC") (19 . "PROC")))
  (test '(let ((f (lambda (p) (let ((u (if p (set-car! p 3) (let ((pp (cons 4 5))) (set! p pp))))) p)))) (let ((o (f #f))) (f o))) '((2 . "PROC")))
  (test '(let ((f (lambda () (let ((x 10)) (let ((g (lambda () x))) (let ((u x)) (let ((v (g))) (let ((w (set! x 11))) (g))))))))) (f)) '((2 . "PURE") (8 . "OBS")))
  (test '(let ((f (lambda () (let ((o (cons 1 2))) (let ((g (lambda () (car o)))) (let ((u (car o))) (let ((v (g))) (let ((w (set-car! o 3))) (g))))))))) (f)) '((2 . "PURE") (11 . "OBS")))
  (test treenode1 '((2 . "PURE") (19 . "PURE")))
  (test '(let ((f (lambda () (cons 1 2)))) (f)) '((2 . "PURE")))
  (test '(let ((f (lambda () (cons 1 2)))) (let ((p (f))) (set-car! p 9))) '((2 . "PURE")))
  (test '(let ((g (lambda () (let ((a 3)) a)))) (let ((f (lambda (h) (h)))) (letrec ((l (lambda (n) (let ((c (zero? n))) (if c 'done (let ((u (f g))) (let ((nn (- n 1))) (l nn)))))))) (l 4)))) '((2 . "PURE") (9 . "PURE") (15 . "PURE")))
  (test '(let ((g (lambda (p) (set-cdr! p 3)))) (letrec ((f (lambda (n) (let ((c (zero? n))) (if c 'done (let ((o (cons 1 2))) (let ((u (g o))) (let ((v (cdr o))) (let ((nn (- n 1))) (f nn)))))))))) (f 4))) '((2 . "PROC") (10 . "PURE"))) 
  (test '(letrec ((f (lambda (n) (let ((c (zero? n))) (if c 'done (let ((z #f)) (let ((g (lambda () (let ((u (set! z #t))) (let ((nn (- n 1))) (f nn)))))) (g)))))))) (f 4)) '((2 . "PURE") (17 . "PROC")))
  (test '(letrec ((f (lambda (n) (let ((c (zero? n))) (if c 'done (let ((z #f)) (let ((g (lambda () (set! z #t)))) (let ((u (g))) (let ((nn (- n 1))) (f nn)))))))))) (f 4)) '((2 . "PURE") (17 . "PROC")))
  (test '(letrec ((f (lambda (n) (let ((c (zero? n))) (if c 'done (let ((m (- n 1))) (f m))))))) (f 4)) '((2 . "PURE")))
  (test '(letrec ((f (lambda (n) (let ((c (zero? n))) (if c 'done (let ((m (- n 1))) (let ((u (set! n m))) (f n)))))))) (f 4)) '((2 . "PURE")))
  (test '(letrec ((f (lambda (m n) (let ((c (zero? n))) (if c 'done (let ((u (set! m 333))) (let ((nn (- n 1))) (f m nn)))))))) (f 123 4)) '((2 . "PURE")))
  (test '(letrec ((f (lambda (n) (let ((c (zero? n))) (if c 'done (let ((o (cons 1 2))) (let ((u (set-car! o 3))) (let ((nn (- n 1))) (f nn))))))))) (f 4)) '((2 . "PURE")))
  (test '(letrec ((f (lambda (n) (let ((c (zero? n))) (if c 'done (let ((o (cons 1 2))) (let ((g (lambda () (set-car! o 3)))) (let ((u (g))) (let ((v (car o))) (let ((nn (- n 1))) (f nn))))))))))) (f 4)) '((2 . "PURE") (20 . "PROC")))
  (test '(letrec ((f (lambda (n) (let ((c (zero? n))) (if c 'done (let ((p (- n 1))) (f p))))))) (f 4)) '((2 . "PURE")))
  (test '(letrec ((f (lambda (n) (let ((c (zero? n))) (if c 'done (let ((o (cons 1 2))) (let ((u (set-car! o 3))) (let ((nn (- n 1))) (f nn))))))))) (f 4)) '((2 . "PURE")))
  (test '(letrec ((f (lambda (n p) (let ((c (zero? n))) (if c 'done (let ((pp (cons 1 2))) (let ((u (set-car! pp p))) (let ((nn (- n 1))) (f nn pp))))))))) (f 4 3)) '((2 . "PURE")))
  (test '(letrec ((f (lambda (n p) (let ((c (zero? n))) (if c 'done (let ((o (cons 1 p))) (let ((u (set-car! o 3))) (let ((nn (- n 1))) (f nn o))))))))) (f 4 2)) '((2 . "PURE")))
  (test '(letrec ((f (lambda (n) (let ((c (zero? n))) (if c 'done (let ((o (cons 1 2))) (let ((u (set-car! o 3))) (let ((nn (- n 1))) (let ((v (f nn))) o))))))))) (f 4)) '((2 . "PURE")))
  (test '(let ((o (cons 1 2))) (letrec ((f (lambda (n) (let ((c (zero? n))) (if c 'done (let ((p (cons 1 2))) (let ((u (set-cdr! p 3))) (let ((v (set! p o))) (let ((w (set-cdr! p 4))) (let ((nn (- n 1))) (f nn))))))))))) (f 4))) '((8 . "PROC")))
  (test '(let ((o (cons 1 2))) (letrec ((f (lambda (n) (let ((c (zero? n))) (if c 'done (let ((p (cons 1 2))) (let ((u (set-cdr! p 3))) (let ((p o)) (let ((w (set-cdr! p 4))) (let ((nn (- n 1))) (f nn))))))))))) (f 4))) '((8 . "PROC")))
  (test '(let ((o (cons 1 2))) (letrec ((f (lambda (n) (let ((c (zero? n))) (if c 'done (let ((p o)) (let ((pp (cons 1 2))) (let ((v (set! p pp))) (let ((w (set-cdr! p 4))) (let ((nn (- n 1))) (f nn))))))))))) (f 4))) '((8 . "PURE")))
  (test '(let ((o (cons 1 2))) (letrec ((f (lambda (n) (let ((c (zero? n))) (if c 'done (let ((p o)) (let ((pp (cons 1 2))) (let ((p pp)) (let ((w (set-cdr! p 4))) (let ((nn (- n 1))) (f nn))))))))))) (f 4))) '((8 . "PURE")))
  (test '(let ((g (lambda (p) (set-cdr! p 3) ))) (let ((f (lambda (h) (let ((o (cons 1 2))) (let ((u (h o))) (cdr o)))))) (letrec ((l (lambda (n) (let ((c (zero? n))) (if c 'done (let ((v (f g))) (let ((nn (- n 1))) (l nn)))))))) (l 4)))) '((2 . "PROC") (10 . "PURE") (28 . "PURE")))
  )

(conc-purity-test)