(letrec ((_create-n0 (lambda (_n1) (letrec ((_loop2 (lambda (_n3 _a4) (let ((_p8 (= _n3 0))) (if _p8 _a4 (let ((_p9 (- _n3 1))) (let ((_p10 (cons '() _a4))) (_loop2 _p9 _p10)))))))) (_loop2 _n1 '()))))) (letrec ((_recursive-div25 (lambda (_l6) (let ((_p11 (null? _l6))) (if _p11 '() (let ((_p12 (car _l6))) (let ((_p13 (cddr _l6))) (let ((_p14 (_recursive-div25 _p13))) (cons _p12 _p14))))))))) (let ((_result7 '(() () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () () ()))) (let ((_p15 (_create-n0 200))) (let ((_p16 (_recursive-div25 _p15))) (equal? _p16 _result7))))))
