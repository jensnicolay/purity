(letrec ((make-grid (lambda (start dims) (let ((_37 (car dims))) (let ((_38 (pair? _37))) (let ((_40 (if _38 (let ((_39 (car dims))) (set! dims _39)) #t))) (let ((_41 _40)) (let ((v (let ((_56 (car dims))) (make-vector _56 start)))) (let ((_42 (cdr dims))) (let ((_43 (null? _42))) (let ((_44 (not _43))) (let ((_54 (if _44 (letrec ((loop (lambda (i) (let ((_45 (car dims))) (let ((_46 (>= i _45))) (if _46 #t (let ((_47 (cdr dims))) (let ((_48 '())) (let ((_49 (cons _47 _48))) (let ((_50 (make-grid start _49))) (let ((_51 (vector-set! v i _50))) (let ((_52 _51)) (let ((_53 (+ i 1))) (loop _53)))))))))))))) (loop 0)) #t))) (let ((_55 _54)) v))))))))))))) (letrec ((grid-ref (lambda (g n) (let ((_24 (car n))) (let ((_25 (pair? _24))) (let ((_27 (if _25 (let ((_26 (car n))) (set! n _26)) #t))) (let ((_28 _27)) (let ((_29 (cdr n))) (let ((_30 (null? _29))) (if _30 (let ((_31 (car n))) (vector-ref g _31)) (let ((_32 (car n))) (let ((_33 (vector-ref g _32))) (let ((_34 (cdr n))) (let ((_35 '())) (let ((_36 (cons _34 _35))) (grid-ref _33 _36)))))))))))))))) (letrec ((grid-set! (lambda (g v n) (let ((_11 (car n))) (let ((_12 (pair? _11))) (let ((_14 (if _12 (let ((_13 (car n))) (set! n _13)) #t))) (let ((_15 _14)) (let ((_16 (cdr n))) (let ((_17 (null? _16))) (if _17 (let ((_18 (car n))) (vector-set! g _18 v)) (let ((_19 (car n))) (let ((_20 (vector-ref g _19))) (let ((_21 (cdr n))) (let ((_22 '())) (let ((_23 (cons _21 _22))) (grid-set! _20 v _23)))))))))))))))) (letrec ((t (let ((_10 '((4 5 6)))) (make-grid 0 _10)))) (letrec ((u (let ((_9 '(2 2))) (make-grid #f _9)))) (let ((_0 '((2 2 3)))) (let ((_1 (grid-ref t _0))) (let ((_2 (equal? _1 0))) (if _2 (let ((_3 '24)) (let ((_4 '((2 2 3)))) (let ((_5 (grid-set! t _3 _4))) (let ((_6 _5)) (let ((_7 '((2 2 3)))) (let ((_8 (grid-ref t _7))) (equal? _8 24))))))) #f)))))))))
